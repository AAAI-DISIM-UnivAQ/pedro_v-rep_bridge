% sonar( L, C, R ) , Left, Center and Right sensor readings
% assuming all are floating numbers
% vision ( Position, Width, Base, Height ) red bottle detection
% Position: close|center|left|right
% Width, Base, Height : floating numbers

def durative ::=
    move_forward(num) | turn_right(num) | turn_left(num) | display(num)
def discrete ::= stop()
% But stop() is not needed. Doing the empty action () will stop all of last
% actions being executed
def visval ::= close|center|dead_center|left|right|reached|onright|onleft|space|seen

percept sonar( num, num, num ), vision( visval, num, num, num)

% Multiple relation type decls in sonarrayone statement

rel empty(visval)
empty(space) <=
    sonar(L, C, R) & L>0.2 & R>0.2 & C>2

empty(onleft) <=
    sonar(L, _, _) & L>1 

empty(onright) <=
    sonar(_, _, R) &  R>1

rel surrounded()
surrounded() <=
    sonar(L, C, R) & L<0.1 & C<0.1 & R<0.1

rel dir(visval)
dir(onright) <=
    sonar(L, C, R) & L<C & C<R

dir(onleft)  <=
    sonar(L, C, R) & R<C & C<L

rel bottle(visval)
bottle(seen) <= vision(_, Width, _, Height) & Height/Width > 1.5
bottle(reached) <= vision(close, W, B, _) & B < 0.02 & W > 0.45
bottle(center)  <= vision(center, W, _, _) & W > 0.03
bottle(dead_center) <= vision(center, W, _, _) & W > 0.0 & W < 0.03
bottle(left)    <= vision(left, W, _, _) & W >= 0.03
bottle(right)   <= vision(right, W, _, _) & W >= 0.03

rel bottle_in(?visval)
bottle_in(left) <= bottle(seen) & bottle(left) 
bottle_in(dead_center) <= bottle(seen) & bottle(dead_center)
bottle_in(center) <= bottle(seen) & bottle(center)
bottle_in(right) <= bottle(seen) & bottle(right)

rel stuck()
stuck()          <= surrounded() & vision(_, _, _, _)

tel wander(), get_to_bottle(), followall()

get_to_bottle() {
     bottle(reached) ~> ()++ bottle_found to vrep_pedro 
     bottle_in(center) ~>  move_forward(1)
     bottle_in(center) ~>  move_forward(1)
     bottle_in(left) ~> turn_left(0.05)
     bottle_in(right) ~> turn_right(0.05)
     true  ~> [display(3):0, wander()]
}

followall() {
    surrounded() & dir(onleft) ~> turn_left(0.2)
    surrounded() & dir(onright) ~> turn_right(0.2)
    not surrounded() ~> [display(1):0, get_to_bottle()]
    true ~> [display(2):0, wander()]
}


wander() {
    empty(space)  ~> move_forward(1)
    % Just move forward when no obst in front

    empty(onleft) ~> turn_left(0.5)
    % obst in front but none to the left, turn left so none in front

    empty(onright) ~> turn_right(0.5)
    % obst in front but none to the right, turn right so none in front

    % surrounded() while min_time 2 ~>  [move_forward(-0.5):1, turn_right(0.5):1]
    % obstacles everywhere, just go backwards and turn right

    true ~> [display(4):0, move_forward(-0.5):1, turn_left(0.5):1]
    % otherwise, back and turn to find unblocked direction
}

act go()
go() ~>
    start_agent( vrep_pedro, all ) ;
% Name robot_wanderer is given to TeleoR process when launched with a command
% teleor -Arobot_wanderer
    start_task(wander_around, get_to_bottle());
    stop_start()



act stop_start()
stop_start() ~>
    get_line(L);
    stopped to vrep_pedro; 
    stop_start()
